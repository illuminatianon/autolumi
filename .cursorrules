Tech Stack:
  • Frontend: Vue 3 using the Composition API.
  • Backend: Node.js (using a popular framework such as Express).
  - Use logger.info/etc in backend for logging, console.log/error in frontend

Backend responsible for
    - calling the Automatic1111 API
    - managing the job queue
    - sending results to the frontend
    - file saving

WebSocket Communication:
 - Pinia stores uses websocket store for communication, consumers of pinia stores do not need to know about websockets
  - Use onMessage/offMessage for WebSocket event handling, NOT subscribe/unsubscribe
  - Always clean up WebSocket listeners in onUnmounted hooks
  - Message handling pattern:
      wsStore.onMessage('eventName', handler);
      onUnmounted(() => wsStore.offMessage('eventName', handler));

Vue implementation:
 - Always use # syntax for templates, not v-slot
 - Always use <script setup> for components
 - When creating components, put the <template> after <script>, do not modify existing components this way unless explicitly asked.

Front end should allow for multiple job configurations to be defined and selected from a list.
Figure out the parameters needed and create a configuration form, that can be used to make new configs and edit existing ones.
we should be able to delete them too.

Automatic1111 API Integration:
  - Endpoints used:
      - /sdapi/v1/txt2img: Generates images from text prompts.
      - /sdapi/v1/img2img: Processes images—including custom scripts like “SD upscale.”
      - Extras endpoints (e.g., /sdapi/v1/extra-single-image) may also be used.
  - API returns images as base64-encoded strings; you may set flags (e.g., "save_images": true) to also save files.

Job Management & Workflow:
 - Express server maintains list of configurations, and whether they are running
 - Running jobs proceed Round Robin, until they are stopped.
 - Maintains a secondary queue for upscale jobs, which are processed immediately when triggered, preventing standard jobs from running until that queue is empty.

 - Upscale jobs include additional parameters such as:
   - "script_name": "SD upscale"
   - "script_args": an array

Image output:
 - Output filenames: 00000.png WHERE the 5 digit number is "count(imagesInFolder)+1"
 - Results of "normal" jobs in data/output/JobName/
 - Results of "upscale" jobs in data/output/upscaled/


Summary:
  Build a Node.js/Express middleman that:
    1. Enqueues txt2img jobs with defined parameters.
    2. Monitors job status and displays results in a Vue 3 frontend.
    3. Show result images in a separate pane, allow saving them at request
    4. UI to select an image for upscale
    5. On image selection, creates a priority upscale task that is dispatched immediately.
    6. Uses Automatic1111’s REST API endpoints to handle both generation and upscale processes.
